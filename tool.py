#!/usr/bin/env python3 
import sys
import hashlib
import os
import requests,json
import sys,string
import argparse

parser = argparse.ArgumentParser(description="specify the file information to be printed")
parser.add_argument('filename',help="the name of file to be analysed")
parser.add_argument('-A','--all',help="print all the information on file",action="store_true")
parser.add_argument('-S','--strings',const=5,nargs='?',type=int,help="print the strings of a file(provide min number,defaults to 5)")
parser.add_argument('-M','--mitre',help="print the MITRE ATT&CK tactics and techniques used by the file",action='store_true')
parser.add_argument('-H','--hash',help="display the sha256 and md5 hash of the file",action='store_true')
parser.add_argument('-I','--info',help="display basic information about the file",action='store_true')
args = parser.parse_args()

filename = args.filename
sha = ""
md5 = ""
def calculate_hash(file):
    with open(filename,'rb',buffering=0) as f:
        sha =  hashlib.file_digest(f,'sha256').hexdigest()
        md = hashlib.file_digest(f,'md5').hexdigest()
        print("SHA256 Hash of the file:",sha)
        print("MD5 hash of the file:",md,"\n")
        return sha,md

def print_strings(n):

    filename = sys.argv[1]
    fd = open(filename, "rb")
    data = fd.read().decode("utf-8", "ignore")
    fd.close()
    count = 0 
    charslist = []
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz/.,1234567890!@#$%^&*(){}[]"
    for character in data:
        if character in chars:
            charslist.append(character)
            count += 1
        else:
            if count >= n:
                print(''.join(charslist[-count:]))
                count = 0
    if count >= n:
        print(''.join(charslist[-count:]))


def get_attack_tactic():
    sha,md = calculate_hash(filename)
    url = "https://www.virustotal.com/api/v3/files/{}/behaviour_mitre_trees".format(sha)

    headers = {
        "accept": "application/json",
        "x-apikey": "<api key>"
    }
    try:
        response = requests.get(url, headers=headers)
        attack_tactic = json.loads(response.text)
        tactics = attack_tactic.get('data').get('CAPA',{}).get('tactics',[])
        for tactic in tactics:
            print("|Tactic ID:{}\t\t|\tTactic name:{}|".format(tactic.get('id'),tactic.get('name')))
            techniques = tactic.get('techniques',[])
            for technique in techniques:
                print("|Technique id:{}\t\t|\tTechnique name:{}|".format(technique.get('id'),technique.get('name')))
    except ConnectionError:
        print("failed to connect to virustotal")



print("file provided:",filename)
print("_\n")

if(args.all):
    print("file provided:",filename)
    print("_\n")
    print("file information:")
    cmd = "file ./"+filename
    os.system(cmd)
    print("_\n")
    sha,md = calculate_hash(filename)
    print("_\n")
    print("strings of the binary(prints strings with a min lenght of 5 by default):")
    print_strings(5)
    print("_\n")
    print("Getting MITRE ATT&CK techniques...")
    get_attack_tactic()
elif(args.strings):
    print_strings(args.strings)
elif(args.mitre):
    print("getting MITRE ATT&CK techniques...")
    get_attack_tactic()
elif(args.hash):
    calculate_hash(filename)
elif(args.info):
    print("file provided:",filename)
    print("_\n")
    print("file information:")
    cmd = "file ./"+filename
    os.system(cmd)
    print("\n")
    cmd = "exiftool ./"+filename
    os.system(cmd)
else:
    print("file information:")
    cmd = "file ./"+filename
    os.system(cmd)
    cmd = "exiftool ./"+filename
    os.system(cmd)
    print("_\n")
    sha,md = calculate_hash(filename)
    print("\n\n-h or --help to view more info on what data can be extracted")
